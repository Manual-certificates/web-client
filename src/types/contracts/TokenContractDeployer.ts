/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TokenContractDeployerInterface extends utils.Interface {
  functions: {
    "deployTokenContract(bytes,bytes32)": FunctionFragment;
    "predictTokenAddress(bytes,bytes32)": FunctionFragment;
    "setTokenImplementation(address)": FunctionFragment;
    "tokenContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployTokenContract"
      | "predictTokenAddress"
      | "setTokenImplementation"
      | "tokenContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployTokenContract",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "predictTokenAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TokenContractDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenContractDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployTokenContract(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    predictTokenAddress(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setTokenImplementation(
      tokenImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;
  };

  deployTokenContract(
    data_: PromiseOrValue<BytesLike>,
    salt_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  predictTokenAddress(
    data_: PromiseOrValue<BytesLike>,
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setTokenImplementation(
    tokenImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployTokenContract(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    predictTokenAddress(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setTokenImplementation(
      tokenImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    deployTokenContract(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    predictTokenAddress(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenImplementation(
      tokenImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployTokenContract(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    predictTokenAddress(
      data_: PromiseOrValue<BytesLike>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenImplementation(
      tokenImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
